// Code generated by github.com/visvasity/blockgen. DO NOT EDIT.

package output

import (
	"fmt"
	"strings"

	"github.com/visvasity/blockgen/blockgen"
	input "github.com/visvasity/blockgen/input"
)

// Reader type defines accessor methods for read-only access.
type JournalRegionReader blockgen.BlockBytes

// Writer type extends the reader with mutable methods.
type JournalRegionWriter struct{ JournalRegionReader }

var structSizeOfJournalRegion = blockgen.SizeFor[input.JournalRegion]()
var fieldOffsetsOfJournalRegion = blockgen.OffsetsFor[input.JournalRegion](nil)

// BlockBytes returns access to the underlying byte slice.
func (v JournalRegionReader) BlockBytes() blockgen.BlockBytes {
	return blockgen.BlockBytes(v)
}

// Writer returns the JournalRegion writer for read-write access to it's fields.
func (v JournalRegionReader) Writer() JournalRegionWriter {
	return JournalRegionWriter{v}
}

// Reader returns the JournalRegion reader with read-only access to it's fields.
func (v JournalRegionWriter) Reader() JournalRegionReader {
	return v.JournalRegionReader
}

// IsZero returns true if all underlying bytes are zero.
func (v JournalRegionReader) IsZero() bool {
	return blockgen.IsZero(v[:structSizeOfJournalRegion])
}

// SetZero sets all underlying bytes to zero.
func (v JournalRegionWriter) SetZero() {
	blockgen.SetZero(v.BlockBytes()[:structSizeOfJournalRegion])
}

func (v JournalRegionReader) String() string {
	var sb strings.Builder
	fmt.Fprintf(&sb, "JournalOffset=%d", v.JournalOffset())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "FileOffset=%d", v.FileOffset())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "RegionSize=%d", v.RegionSize())
	return sb.String()
}

func (v JournalRegionReader) CopyTo(x *input.JournalRegion) {
	x.JournalOffset = v.JournalOffset()
	x.FileOffset = v.FileOffset()
	x.RegionSize = v.RegionSize()
}

func (v JournalRegionWriter) CopyFrom(x *input.JournalRegion) {
	v.SetJournalOffset(x.JournalOffset)
	v.SetFileOffset(x.FileOffset)
	v.SetRegionSize(x.RegionSize)
}

func (v JournalRegionReader) JournalOffset() int64 {
	var offset = fieldOffsetsOfJournalRegion[0]
	return int64(v.BlockBytes().Int64At(offset))
}

func (v JournalRegionWriter) SetJournalOffset(x int64) {
	var offset = fieldOffsetsOfJournalRegion[0]
	v.BlockBytes().SetInt64At(offset, int64(x))
}

func (v JournalRegionReader) FileOffset() int64 {
	var offset = fieldOffsetsOfJournalRegion[1]
	return int64(v.BlockBytes().Int64At(offset))
}

func (v JournalRegionWriter) SetFileOffset(x int64) {
	var offset = fieldOffsetsOfJournalRegion[1]
	v.BlockBytes().SetInt64At(offset, int64(x))
}

func (v JournalRegionReader) RegionSize() int64 {
	var offset = fieldOffsetsOfJournalRegion[2]
	return int64(v.BlockBytes().Int64At(offset))
}

func (v JournalRegionWriter) SetRegionSize(x int64) {
	var offset = fieldOffsetsOfJournalRegion[2]
	v.BlockBytes().SetInt64At(offset, int64(x))
}
