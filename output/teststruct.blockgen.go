// Code generated by github.com/visvasity/blockgen. DO NOT EDIT.

package output

import (
	"fmt"
	"strings"

	"github.com/visvasity/blockgen/blockgen"
	input "github.com/visvasity/blockgen/input"
)

// Reader type defines accessor methods for read-only access.
type TestStructReader blockgen.BlockBytes

// Writer type extends the reader with mutable methods.
type TestStructWriter struct{ TestStructReader }

var structSizeOfTestStruct = blockgen.SizeFor[input.TestStruct]()
var fieldOffsetsOfTestStruct = blockgen.OffsetsFor[input.TestStruct](nil)

// BlockBytes returns access to the underlying byte slice.
func (v TestStructReader) BlockBytes() blockgen.BlockBytes {
	return blockgen.BlockBytes(v)
}

// Writer returns the TestStruct writer for read-write access to it's fields.
func (v TestStructReader) Writer() TestStructWriter {
	return TestStructWriter{v}
}

// Reader returns the TestStruct reader with read-only access to it's fields.
func (v TestStructWriter) Reader() TestStructReader {
	return v.TestStructReader
}

// IsZero returns true if all underlying bytes are zero.
func (v TestStructReader) IsZero() bool {
	return blockgen.IsZero(v[:structSizeOfTestStruct])
}

// SetZero sets all underlying bytes to zero.
func (v TestStructWriter) SetZero() {
	blockgen.SetZero(v.BlockBytes()[:structSizeOfTestStruct])
}

func (v TestStructReader) String() string {
	var sb strings.Builder
	fmt.Fprintf(&sb, "Int64=%d", v.Int64())
	return sb.String()
}

func (v TestStructReader) CopyTo(x *input.TestStruct) {
	x.Int64 = v.Int64()
}

func (v TestStructWriter) CopyFrom(x *input.TestStruct) {
	v.SetInt64(x.Int64)
}

func (v TestStructReader) Int64() int64 {
	var offset = fieldOffsetsOfTestStruct[0]
	return int64(v.BlockBytes().Int64At(offset))
}

func (v TestStructWriter) SetInt64(x int64) {
	var offset = fieldOffsetsOfTestStruct[0]
	v.BlockBytes().SetInt64At(offset, int64(x))
}
