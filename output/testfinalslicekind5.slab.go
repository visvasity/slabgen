// Code generated by github.com/visvasity/slabgen. DO NOT EDIT.

package output

import (
	"fmt"
	"strings"

	input "github.com/visvasity/slabgen/input"
	"github.com/visvasity/slabgen/slabs"
	"github.com/visvasity/slabgen/slabutil"
)

// Reader type defines accessor methods for read-only access.
type TestFinalSliceKind5Reader[T1 slabs.Number, S1 slabs.Struct, S1Reader slabs.Reader[S1, S1Writer], S1Writer slabs.Writer[S1, S1Reader]] []byte

// Writer type extends the reader with mutable methods.
type TestFinalSliceKind5Writer[T1 slabs.Number, S1 slabs.Struct, S1Reader slabs.Reader[S1, S1Writer], S1Writer slabs.Writer[S1, S1Reader]] struct {
	TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]
}

var fieldOffsetsOfTestFinalSliceKind5 slabutil.OffsetsMap

// SlabBytes returns access to the underlying byte slice.
func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) SlabBytes() slabs.Bytes {
	return []byte(v)
}

// Writer returns the TestFinalSliceKind5 writer for read-write access to it's fields.
func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) Writer() TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer] {
	return TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]{v}
}

// Reader returns the TestFinalSliceKind5 reader with read-only access to it's fields.
func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) Reader() TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer] {
	return v.TestFinalSliceKind5Reader
}

// IsZero returns true if all underlying bytes are zero.
func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) IsZero() bool {
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	return slabutil.IsZero(v[:structSizeOfTestFinalSliceKind5])
}

// SetZero sets all underlying bytes to zero.
func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) SetZero() {
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	slabutil.SetZero(v.SlabBytes()[:structSizeOfTestFinalSliceKind5])
}

func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) String() string {
	var sb strings.Builder
	fmt.Fprintf(&sb, "FinalSlice=[:%d:%d]{", v.FinalSliceLen(), v.FinalSliceCap())
	for i := 0; i < v.FinalSliceLen(); i++ {
		if i == 0 {
			fmt.Fprintf(&sb, "%d", v.FinalSliceItemAt(i))
		} else {
			fmt.Fprintf(&sb, " %d", v.FinalSliceItemAt(i))
		}
	}
	fmt.Fprintf(&sb, "}")
	return sb.String()
}

func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) CopyTo(x *input.TestFinalSliceKind5[T1, S1]) {
	x.FinalSlice = make([]T1, v.FinalSliceLen())
	for i := 0; i < v.FinalSliceLen(); i++ {
		x.FinalSlice[i] = v.FinalSliceItemAt(i)
	}
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) CopyFrom(x *input.TestFinalSliceKind5[T1, S1]) {
	v.ResizeFinalSlice(len(x.FinalSlice))
	for i := 0; i < len(x.FinalSlice); i++ {
		v.SetFinalSliceItemAt(i, x.FinalSlice[i])
	}
}

// TestFinalSliceKind5SliceFieldCap returns the slice field capacity for the given underlying byte slice size.
func TestFinalSliceKind5SliceFieldCap[T1 slabs.Number, S1 slabs.Struct](nbytes int) int {
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	var sliceElemSizeOfTestFinalSliceKind5 = slabutil.ElemSizeFor[T1]()
	// TODO: We should also add the required alignment offset to the struct-size.
	return (nbytes - structSizeOfTestFinalSliceKind5) / sliceElemSizeOfTestFinalSliceKind5
}

// FinalSliceLen method returns number of elements in the slice field.
func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) FinalSliceLen() int {
	var fieldOffsetsOfTestFinalSliceKind5 = slabutil.OffsetsFor[input.TestFinalSliceKind5[T1, S1]](&fieldOffsetsOfTestFinalSliceKind5)
	var offset = fieldOffsetsOfTestFinalSliceKind5[0] + slabutil.OffsetOfSliceLen
	return slabutil.IntAt(v.SlabBytes(), offset)
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) internalSetFinalSliceLen(x int) {
	var fieldOffsetsOfTestFinalSliceKind5 = slabutil.OffsetsFor[input.TestFinalSliceKind5[T1, S1]](&fieldOffsetsOfTestFinalSliceKind5)
	var offset = fieldOffsetsOfTestFinalSliceKind5[0] + slabutil.OffsetOfSliceLen
	slabutil.SetIntAt(v.SlabBytes(), offset, x)
}

// FinalSliceCap method returns maximum number of elements for the slice field.
func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) FinalSliceCap() int {
	var fieldOffsetsOfTestFinalSliceKind5 = slabutil.OffsetsFor[input.TestFinalSliceKind5[T1, S1]](&fieldOffsetsOfTestFinalSliceKind5)
	var offset = fieldOffsetsOfTestFinalSliceKind5[0] + slabutil.OffsetOfSliceCap
	return slabutil.IntAt(v.SlabBytes(), offset)
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) internalSetFinalSliceCap(x int) {
	var fieldOffsetsOfTestFinalSliceKind5 = slabutil.OffsetsFor[input.TestFinalSliceKind5[T1, S1]](&fieldOffsetsOfTestFinalSliceKind5)
	var offset = fieldOffsetsOfTestFinalSliceKind5[0] + slabutil.OffsetOfSliceCap
	slabutil.SetIntAt(v.SlabBytes(), offset, x)
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) ResizeFinalSlice(size int) int {
	if cap := v.FinalSliceCap(); size > cap {
		size = cap
	}
	n := v.FinalSliceLen()
	if size == n {
		return size
	}
	if size < n {
		v.DeleteFinalSliceItems(size, n)
		return size
	}
	v.internalSetFinalSliceLen(size)
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	var elemSize = slabutil.ElemSizeFor[[]T1]()
	var begin = structSizeOfTestFinalSliceKind5 + n*elemSize
	var end = structSizeOfTestFinalSliceKind5 + size*elemSize
	slabutil.SetZero(v.SlabBytes()[begin:end])
	return size
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) DeleteFinalSliceItems(i, j int) {
	n := v.FinalSliceLen()
	if i < 0 || i >= n {
		panic(fmt.Sprintf("first slice index %d is out of range [0:%d:%d]", i, v.FinalSliceLen(), v.FinalSliceCap()))
	}
	if j < 0 || j >= n {
		panic(fmt.Sprintf("second slice index %d is out of range [0:%d:%d]", i, v.FinalSliceLen(), v.FinalSliceCap()))
	}
	if j < i {
		panic(fmt.Sprintf("invalid slice indices %d < %d", j, i))
	}
	if i == j {
		return
	}
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	var elemSize = slabutil.ElemSizeFor[[]T1]()

	ioff := structSizeOfTestFinalSliceKind5 + i*elemSize
	joff := structSizeOfTestFinalSliceKind5 + j*elemSize
	end := structSizeOfTestFinalSliceKind5 + n*elemSize

	copy(v.SlabBytes()[ioff:end], v.SlabBytes()[joff:end])
	slabutil.SetZero(v.SlabBytes()[end-(joff-ioff) : end])
	v.internalSetFinalSliceLen(n - (j - i))
}

func (v TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer]) FinalSliceItemAt(i int) T1 {
	if i < 0 || i >= v.FinalSliceLen() {
		panic(fmt.Sprintf("slice index %d is out of range [:%d:%d]", i, v.FinalSliceLen(), v.FinalSliceCap()))
	}
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	var elemSize = slabutil.ElemSizeFor[[]T1]()
	var offset = structSizeOfTestFinalSliceKind5 + i*elemSize
	return slabutil.NumberAt[T1](v.SlabBytes(), offset)
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) SetFinalSliceItemAt(i int, x T1) {
	if i < 0 || i >= v.FinalSliceLen() {
		panic(fmt.Sprintf("slice index %d is out of range [:%d:%d]", i, v.FinalSliceLen(), v.FinalSliceCap()))
	}
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	var elemSize = slabutil.ElemSizeFor[[]T1]()
	var offset = structSizeOfTestFinalSliceKind5 + i*elemSize
	slabutil.SetNumberAt[T1](v.SlabBytes(), offset, x)
}

func (v TestFinalSliceKind5Writer[T1, S1, S1Reader, S1Writer]) AppendFinalSliceItem(x T1) {
	n := v.FinalSliceLen()
	if n == v.FinalSliceCap() {
		panic(fmt.Sprintf("append to slice overflows the maximum capacity [::%d]", v.FinalSliceCap()))
	}
	v.internalSetFinalSliceLen(n + 1)
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	var elemSize = slabutil.ElemSizeFor[[]T1]()
	var offset = structSizeOfTestFinalSliceKind5 + n*elemSize
	slabutil.SetNumberAt[T1](v.SlabBytes(), offset, x)
}

// NewTestFinalSliceKind5Reader creates a zero-initialized TestFinalSliceKind5. Returns nil if input block size is too small.
func NewTestFinalSliceKind5[T1 slabs.Number, S1 slabs.Struct, S1Reader slabs.Reader[S1, S1Writer], S1Writer slabs.Writer[S1, S1Reader]](block []byte) TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer] {
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	size := len(block)
	if size < structSizeOfTestFinalSliceKind5 {
		return nil
	}
	slabutil.SetZero(block)
	v := TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer](block)
	// TestFinalSliceKind5 type has a slice field; we must set a cap on it.
	n := TestFinalSliceKind5SliceFieldCap[T1, S1](size)
	v.Writer().internalSetFinalSliceCap(n)
	return v
}

// OpenTestFinalSliceKind5Reader parses and prepares an existing TestFinalSliceKind5 for read/write access.
func OpenTestFinalSliceKind5[T1 slabs.Number, S1 slabs.Struct, S1Reader slabs.Reader[S1, S1Writer], S1Writer slabs.Writer[S1, S1Reader]](block []byte) (TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer], error) {
	var structSizeOfTestFinalSliceKind5 = slabutil.SizeFor[input.TestFinalSliceKind5[T1, S1]]()
	size := len(block)
	if size < structSizeOfTestFinalSliceKind5 {
		return nil, fmt.Errorf("input size is too small")
	}
	v := TestFinalSliceKind5Reader[T1, S1, S1Reader, S1Writer](block)
	// TestFinalSliceKind5 type has a slice field; validate it's len and cap.
	n := TestFinalSliceKind5SliceFieldCap[T1, S1](size)
	if x := v.FinalSliceCap(); x != n {
		return nil, fmt.Errorf("slice field cap must be %d, found %d", n, x)
	}
	if x := v.FinalSliceLen(); x < 0 || x > n {
		return nil, fmt.Errorf("slice field len is %d, must be between [%d-%d)", x, 0, n)
	}
	return v, nil
}
