// Code generated by github.com/visvasity/blockgen. DO NOT EDIT.

package output

import (
	"fmt"
	"strings"

	"github.com/visvasity/blockgen/blockgen"
	input "github.com/visvasity/blockgen/input"
)

// Reader type defines accessor methods for read-only access.
type LinkedListReader blockgen.BlockBytes

// Writer type extends the reader with mutable methods.
type LinkedListWriter struct{ LinkedListReader }

var structSizeOfLinkedList = blockgen.SizeFor[input.LinkedList]()
var fieldOffsetsOfLinkedList = blockgen.OffsetsFor[input.LinkedList](nil)

// BlockBytes returns access to the underlying byte slice.
func (v LinkedListReader) BlockBytes() blockgen.BlockBytes {
	return blockgen.BlockBytes(v)
}

// Writer returns the LinkedList writer for read-write access to it's fields.
func (v LinkedListReader) Writer() LinkedListWriter {
	return LinkedListWriter{v}
}

// Reader returns the LinkedList reader with read-only access to it's fields.
func (v LinkedListWriter) Reader() LinkedListReader {
	return v.LinkedListReader
}

// IsZero returns true if all underlying bytes are zero.
func (v LinkedListReader) IsZero() bool {
	return blockgen.IsZero(v[:structSizeOfLinkedList])
}

// SetZero sets all underlying bytes to zero.
func (v LinkedListWriter) SetZero() {
	blockgen.SetZero(v.BlockBytes()[:structSizeOfLinkedList])
}

func (v LinkedListReader) String() string {
	var sb strings.Builder
	fmt.Fprintf(&sb, "HeadDBA=%d", v.HeadDBA())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "NumValues=%d", v.NumValues())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "NumLinkBlocks=%d", v.NumLinkBlocks())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "NumFreeItems=%d", v.NumFreeItems())
	return sb.String()
}

func (v LinkedListReader) CopyTo(x *input.LinkedList) {
	x.HeadDBA = v.HeadDBA()
	x.NumValues = v.NumValues()
	x.NumLinkBlocks = v.NumLinkBlocks()
	x.NumFreeItems = v.NumFreeItems()
}

func (v LinkedListWriter) CopyFrom(x *input.LinkedList) {
	v.SetHeadDBA(x.HeadDBA)
	v.SetNumValues(x.NumValues)
	v.SetNumLinkBlocks(x.NumLinkBlocks)
	v.SetNumFreeItems(x.NumFreeItems)
}

func (v LinkedListReader) HeadDBA() input.DBA {
	var offset = fieldOffsetsOfLinkedList[0]
	return input.DBA(v.BlockBytes().Uint64At(offset))
}

func (v LinkedListWriter) SetHeadDBA(x input.DBA) {
	var offset = fieldOffsetsOfLinkedList[0]
	v.BlockBytes().SetUint64At(offset, uint64(x))
}

func (v LinkedListReader) NumValues() int64 {
	var offset = fieldOffsetsOfLinkedList[1]
	return int64(v.BlockBytes().Int64At(offset))
}

func (v LinkedListWriter) SetNumValues(x int64) {
	var offset = fieldOffsetsOfLinkedList[1]
	v.BlockBytes().SetInt64At(offset, int64(x))
}

func (v LinkedListReader) NumLinkBlocks() int32 {
	var offset = fieldOffsetsOfLinkedList[2]
	return int32(v.BlockBytes().Int32At(offset))
}

func (v LinkedListWriter) SetNumLinkBlocks(x int32) {
	var offset = fieldOffsetsOfLinkedList[2]
	v.BlockBytes().SetInt32At(offset, int32(x))
}

func (v LinkedListReader) NumFreeItems() int32 {
	var offset = fieldOffsetsOfLinkedList[3]
	return int32(v.BlockBytes().Int32At(offset))
}

func (v LinkedListWriter) SetNumFreeItems(x int32) {
	var offset = fieldOffsetsOfLinkedList[3]
	v.BlockBytes().SetInt32At(offset, int32(x))
}
